@Library('jenkinslib@master')
def build = new org.devops.build()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonar_status_api = new org.devops.sonarqube_status_api()
def runOpts
//def mailUser = '18310892118@163.com'
if ( "${runOpts}" == "GitlabPush" ) {
	branchName = branch - '/refs/heads/'
	currentBuild.description = "Trigger by ${buildUser} - ${branch}"
	gitlab.ChangeCommitStatus(projectId,commitSha,"running")
} else {
	branchName = 'master'
	srcUrl = 'ssh://git@gitlab-netadm.leju.com:2223/test/simple-java-maven-app.git'
	mailUser = '18310892118@163.com'
}

pipeline {
    agent { node{label "scanner"} }
	options {
		timeout(time: 1, unit: 'HOURS') 
		timestamps()
		buildDiscarder(logRotator(numToKeepStr: '10'))
	}
    triggers {
        GenericTrigger(
        	genericVariables: [
                [key: "branch", value: "\$.ref", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "buildUser", value: "\$.user_username", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "srcUrl", value: "\$.project.git_ssh_url", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "projectId", value: "\$.project.id", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "commitSha", value: "\$.checkout_sha", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "before", value: "\$.before", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "after", value: "\$.after", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "object_kind", value: "\$.object_kind", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "mailUser", value: "\$.user_email", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""]
            ],
        	genericRequestVariables: [
                [key: "runOpts", regexpFilter: ""]
            ],
            genericHeaderVariables: [
            ],
            token: 'demon-maven-service_PUSH',
            causeString: 'Triggered on $branch',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: true,
			regexpFilterText: '$object_kind $before $after',
			regexpFilterExpression: '^push\\s(?!0{40}).{40}\\s(?!0{40}).{40}$'
        )
    }
    stages {
        stage('Checkout') {
            steps{
                script{
                    tools.PrintMes("${branchName}","green")
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]],
                              doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                              userRemoteConfigs: [[credentialsId: '4eaf63a6-52b2-4d8b-ba14-26322a3135e0',
                              url: "${srcUrl}"]]])
                }
            }
        }
        stage('Build') {
            steps{
                script{
                    buildHome = tool "mvn-3.6.3"
                    sh """
						export PATH=/usr/java/jdk1.8.0_212-amd64/bin:$PATH
						${buildHome}/bin/mvn clean install
					"""
                }
            }
        }
		stage('CodeScan'){
			steps {
				script{
					tools.PrintMes("代码扫描","green")
					sonar.Scan("${JOB_NAME}","${JOB_NAME}",'src','java','Sonar-Server','UTF-8', 
					'-Dsonar.java.binaries=target/classes -Dsonar.java.test.binaries=target/test-classes -Dsonar.java.surefire.report=target/surefire-reports')
				}
			}
		}
		stage('Quality Gate') {
			steps {
				script {
					def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
					println(qg)
					if (qg.status != 'OK') {
						error "Pipeline aborted due to quality gate failure: ${qg.status}"
					} else if (qg.status == 'OK'){
						tools.PrintMes("quality gate: ${qg.status}","green")
					}
					//tools.PrintMes("获取扫描结果","green")
					//result = sonar_status_api.GetProjectStatus("${JOB_NAME}")
					//println(result)
					//if(result.toString() == "ERROR"){
					//	error "代码质量阈错误！请及时修复！"
					//}
				}
			}
		}
    }
	post {
		success{
			script{
				tools.PrintMes("success","green")
				if ( "${runOpts}" == "GitlabPush" ) {
					gitlab.ChangeCommitStatus(projectId,commitSha,"success")
				}
				toemail.toemail("","${mailUser}")
			}
		}
		failure{
			script{
				tools.PrintMes("failed","red")
				if ( "${runOpts}" == "GitlabPush" ) {
					gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
				}
				toemail.toemail("","${mailUser}")
			}
		}
		aborted{
			script{
				tools.PrintMes("canceled","buie")
				if ( "${runOpts}" == "GitlabPush" ) {
					gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
				}
				toemail.toemail("","${mailUser}")
			}
		}
	}
}
