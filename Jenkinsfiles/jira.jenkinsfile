@Library('jenkinslib@master')
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def jira = new org.devops.jira()
pipeline {
    agent { node{label "scanner"} }
	options {
		timeout(time: 1, unit: 'HOURS') 
		timestamps()
		buildDiscarder(logRotator(numToKeepStr: '10'))
	}
    triggers {
        GenericTrigger(
        	genericVariables: [
                [key: "webHookData", value: "\$", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""]
            ],
        	genericRequestVariables: [
                [key: "projectKey", regexpFilter: ""]
            ],
            genericHeaderVariables: [
            ],
            token: 'jira-devops-service',
            causeString: 'Triggered on Jira',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: true
        )
    }
    stages {
        stage('FilterData') {
            steps{
                script{
					response = readJSON text: """${webHookData}"""
					env.eventType = response["webhookEvent"]
					tools.PrintMes("${eventType}","green")
					switch (eventType){
						case("jira:issue_created"):
							env.issueName = response["issue"]["key"]
							env.userName = response["user"]["name"]
							env.moduleNames = response["issue"]["fields"]["components"]
							env.fixVersion = response["issue"]["fields"]["fixVersions"]
							tools.PrintMes("Trigger by ${userName} ${eventType} ${issueName}","green")
							currentBuild.description = "Trigger by ${userName} ${eventType} ${issueName}"
							break
						case("jira:issue_updated"):
							env.issueName = response["issue"]["key"]
							env.userName = response["user"]["name"]
							env.moduleNames = response["issue"]["fields"]["components"]
							env.fixVersion = response["issue"]["fields"]["fixVersions"]
							tools.PrintMes("Trigger by ${userName} ${eventType} ${issueName}","green")
							currentBuild.description = "Trigger by ${userName} ${eventType} ${issueName}"
							break
						case("jira:version_released"):
							env.versionName = response["version"]["name"]
							currentBuild.description = "Triggre by ${eventType} ${versionName}"
							break
						default:
							println('Hello World!')
					}
                }
            }
        }
		stage('DeleteBranch'){
			when {
				environment name: 'eventType', value: 'jira:version_released'
			}
			steps{
				script{
					//获取issueName
					println("project%20%3D%20${projectKey}%20AND%20fixVersion%20%3D%20${versionName}%20AND%20issuetype%20%3D%20Task")
					response = jira.RunJql("project%20%3D%20${projectKey}%20AND%20fixVersion%20%3D%20${versionName}%20AND%20issuetype%20%3D%20Task")
					response = readJSON text: """${response.content}"""
					issues = [:]
					for ( issue in response['issues']){
						println(issue["key"])
						println(issue["fields"]["components"])
						issues[issue["key"]] = []

						//获取issue关联的模块
						for (component in issue["fields"]["components"] ){
							issues[issue["key"]].add(component["name"])
						}
					}
					println(issues)
					for (issue in issues.keySet()){
						for (projectName in issues[issue]){
							//println(projectName)
							repoName = projectName.split()[0]
							println(repoName)
							projectId = gitlab.GetProjectId(projectName)
						}
						try{
							println("创建合并请求 ${projectId} -->  RELEASE-${versionName}  ---> master")
							result = gitlab.CreateMergeRequest(projectId,"RELEASE-${versionName}","master","RELEASE-${versionName}--->master")
							result = readJSON text: """${result}"""
							mergeId = result["iid"]
							gitlab.AcceptMergeRequest(projectId,mergeId)
							sleep 15
						} catch(e) {
							println(e)
						}
						response = gitlab.SearchProjectBranchesInfo(projectId,issue)
						println(response[projectId][0]['merged'])
						if (response[projectId][0]['merged'] == false){
							println("${projectName} --> ${issue} -->此分支未合并暂时忽略！")
						} else {
						    println("${projectName} --> ${issue} -->此分支已合并准备清理！")
						    gitlab.DeleteBranch(projectId,issue)
						}
					}
				}
			}
		}
		stage('CreateBranchOrMR'){
			when {
				anyOf {
					environment name: 'eventType', value: 'jira:issue_created'   //issue 创建 /更新
					environment name: 'eventType', value: 'jira:issue_updated'
				}
			}
			steps {
				script{
					def projectIds = []
					projectName = moduleNames 
					fixVersion = readJSON text: """${fixVersion}"""
					println(fixVersion.size())

					//获取GitLab项目ID
					def projects = readJSON text: """${moduleNames}"""
					println(projects)
					for (project in projects){
						projectName = project["name"]
						println(projectName)
						currentBuild.description += "\n project: ${projectName}"
						try {
							projectId = gitlab.GetProjectId(projectName)
							println(projectId)
							projectIds.add(projectId)
						} catch(e){
							println(e)
							println("未获取到项目ID, 请检查模块名称!")
						}
					}
					println(projectIds)
					if (fixVersion.size() == 0) {
                        for (id in projectIds){
							searchResult = gitlab.SearchRepositoryBranch(id,"${issueName}")
							if (searchResult == 'true') {
								println("已存在${issueName}分支.")
                            	currentBuild.description += "\n 该特性分支已存在, 未创建 --> ${id} --> ${issueName}"
							} else {
                            	println("新建特性分支--> ${id} --> ${issueName}")
                            	currentBuild.description += "\n 新建特性分支--> ${id} --> ${issueName}"
                            	gitlab.CreateBranch(id,"${issueName}","master")
							}
                        }
                    } else {
                        fixVersion = fixVersion[0]['name']
                        println("Issue关联release操作, Jenkins创建合并请求")
                        for (id in projectIds){
							//创建RELEASE分支
							searchResult = gitlab.SearchRepositoryBranch(id,"RELEASE-${fixVersion}")
							if (searchResult == 'true') {
								println("已存在RELEASE-${fixVersion}分支.")
                            	currentBuild.description += "\n 该特性分支已存在, 未创建 --> ${id} --> RELEASE-${fixVersion}"
							} else {
                            	println("创建RELEASE-->${id} -->${fixVersion}分支")
                            	currentBuild.description += "\n 新建特性分支--> ${id} --> RELEASE-${fixVersion}"
                            	gitlab.CreateBranch(id,"RELEASE-${fixVersion}","master")
							}
							//创建特性分支到RELEASE分支的合并请求
							result = gitlab.SearchMergeRequest(id,"${issueName}","RELEASE-${fixVersion}",'opened')
							if (result == 'true') {
								println("已存在${issueName}到RELEASE-${fixVersion}分支的合并请求")
                        		currentBuild.description += "\n 已存在 ${id} --> ${issueName} --> RELEASE-${fixVersion}合并请求, 未创建" 
							} else {
                           		println("创建合并请求 ${id} --> ${issueName} ---> RELEASE-${fixVersion}")
                        		currentBuild.description += "\n Issue关联release, Jenkins创建合并请求 ${id} --> ${issueName} --> RELEASE-${fixVersion}" 
                           		gitlab.CreateMergeRequest(id,"${issueName}","RELEASE-${fixVersion}","${issueName}--->RELEASE-${fixVersion}")
							}
						}
                    }
				}
			}
		}
    }
}
