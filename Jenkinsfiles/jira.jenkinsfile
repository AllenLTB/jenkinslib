@Library('jenkinslib@master')
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
/*
if ( "${runOpts}" == "" ) {
	branchName = branch - 'refs/heads/'
	currentBuild.description = "Trigger by ${buildUser} - ${branch}"
	gitlab.ChangeCommitStatus(projectId,commitSha,"running")
}
*/
pipeline {
    agent { node{label "scanner"} }
	options {
		timeout(time: 1, unit: 'HOURS') 
		timestamps()
		buildDiscarder(logRotator(numToKeepStr: '10'))
	}
    triggers {
        GenericTrigger(
        	genericVariables: [
                //[key: "webhookEvent", value: "\$.webhookEvent", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""],
                [key: "webHookData", value: "\$", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""]
            ],
        	genericRequestVariables: [
                [key: "projectKey", regexpFilter: ""]
            ],
            genericHeaderVariables: [
            ],
            token: 'jira-devops-service',
            causeString: 'Triggered on Jira',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: true
			//regexpFilterText: '$object_kind $before $after',
			//regexpFilterExpression: '^push\\s(?!0{40}).{40}\\s(?!0{40}).{40}$'
        )
    }
    stages {
        stage('FilterData') {
            steps{
                script{
					response = readJSON text: """${webHookData}"""
					env.eventType = response["webhookEvent"]
					tools.PrintMes("${eventType}","green")
					switch (eventType){
						case("jira:issue_created"):
							env.issueName = response["issue"]["key"]
							env.userName = response["user"]["name"]
							env.moduleNames = response["issue"]["fields"]["components"][0]["name"]
							env.newBranchName = response["issue"]["fields"]["summary"]
							env.fixVersion = response["issue"]["fields"]["fixVersions"]
							tools.PrintMes("Trigger by ${userName} ${eventType} ${issueName}","green")
							currentBuild.description = "Trigger by ${userName} ${eventType} ${issueName}"
							break
					}
                }
            }
        }
		stage('CreateBranchOrMR'){
			when {
				anyOf {
					environment name: 'eventType', value: 'jira:issue_created'   //issue 创建 /更新
					environment name: 'eventType', value: 'jira:issue_updated'
				}
			}
			steps {
				script{
					projectName = moduleNames 
					projectId = gitlab.GetProjectId(projectName)
					gitlab.CreateBranch(projectId,newBranchName,"master")
				}
			}
		}
    }
}
