@Library('jenkinslib@master')
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
pipeline {
    agent { node{label "scanner"} }
	options {
		timeout(time: 1, unit: 'HOURS') 
		timestamps()
		buildDiscarder(logRotator(numToKeepStr: '10'))
	}
    triggers {
        GenericTrigger(
        	genericVariables: [
                [key: "webHookData", value: "\$", expressionType: "JSONPath", regexpFilter: "", defaultValue: ""]
            ],
        	genericRequestVariables: [
                [key: "projectKey", regexpFilter: ""]
            ],
            genericHeaderVariables: [
            ],
            token: 'jira-devops-service',
            causeString: 'Triggered on Jira',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: true
        )
    }
    stages {
        stage('FilterData') {
            steps{
                script{
					response = readJSON text: """${webHookData}"""
					env.eventType = response["webhookEvent"]
					tools.PrintMes("${eventType}","green")
					switch (eventType){
						case("jira:issue_created"):
							env.issueName = response["issue"]["key"]
							env.userName = response["user"]["name"]
							env.moduleNames = response["issue"]["fields"]["components"]
							env.fixVersion = response["issue"]["fields"]["fixVersions"]
							tools.PrintMes("Trigger by ${userName} ${eventType} ${issueName}","green")
							currentBuild.description = "Trigger by ${userName} ${eventType} ${issueName}"
							break
						case("jira:issue_updated"):
							env.issueName = response["issue"]["key"]
							env.userName = response["user"]["name"]
							env.moduleNames = response["issue"]["fields"]["components"]
							env.fixVersion = response["issue"]["fields"]["fixVersions"]
							tools.PrintMes("Trigger by ${userName} ${eventType} ${issueName}","green")
							currentBuild.description = "Trigger by ${userName} ${eventType} ${issueName}"
							break
					}
                }
            }
        }
		stage('CreateBranchOrMR'){
			when {
				anyOf {
					environment name: 'eventType', value: 'jira:issue_created'   //issue 创建 /更新
					environment name: 'eventType', value: 'jira:issue_updated'
				}
			}
			steps {
				script{
					def projectIds = []
					projectName = moduleNames 
					fixVersion = readJSON text: """${fixVersion}"""
					println(fixVersion.size())

					//获取GitLab项目ID
					def projects = readJSON text: """${moduleNames}"""
					println(projects)
					for (project in projects){
						projectName = project["name"]
						println(projectName)
						currentBuild.description += "\n project: ${projectName}"
						try {
							projectId = gitlab.GetProjectId(projectName)
							println(projectId)
							projectIds.add(projectId)
						} catch(e){
							println(e)
							println("未获取到项目ID，请检查模块名称！")
						}
					}
					println(projectIds)
					if (fixVersion.size() == 0) {
                        for (id in projectIds){
							branchList = gitlab.ListRepositoryBranch(id)
							for (name in branchList) {
								if (name == "${issueName}") {
									println("qwqwqwqwqwqwqwqwqwqw")
									println("已存在${name}分支.")
                            		currentBuild.description += "\n 该特性分支已存在, 未进行创建 --> ${id} --> ${issueName}"
								} else {
									println("jdjdjdjdjdjdjjdjdj")
                            		println("新建特性分支--> ${id} --> ${issueName}")
                             		currentBuild.description += "\n 新建特性分支--> ${id} --> ${issueName}"
                            		gitlab.CreateBranch(id,"${issueName}","master")
								}
							}
                        }
                    } else {
                        fixVersion = fixVersion[0]['name']
                        println("Issue关联release操作,Jenkins创建合并请求")
                        currentBuild.description += "\n Issue关联release操作,Jenkins创建合并请求 \n ${issueName} --> RELEASE-${fixVersion}" 
                        for (id in projectIds){
							branchList = gitlab.ListRepositoryBranch(projectId)
							for (name in branchList) {
								if (name == "RELEASE-${fixVersion}") {
									println("已存在${name}分支.")
                            		currentBuild.description += "\n 该特性分支已存在, 未进行创建 --> ${id} --> ${issueName}"
								} else {
                            		println("创建RELEASE-->${id} -->${fixVersion}分支")
                            		gitlab.CreateBranch(id,"RELEASE-${fixVersion}","master")
                            		
                            		println("创建合并请求 ${issueName} ---> RELEASE-${fixVersion}")
                            		gitlab.CreateMr(id,"${issueName}","RELEASE-${fixVersion}","${issueName}--->RELEASE-${fixVersion}")
								}
							}
						}
                    }
				}
			}
		}
    }
}
